@page "/"
@using OnlineCompiler.Shared
@inject HttpClient Http
@using System.Globalization
@inject IStringLocalizer<Localization> Loc

<PageTitle>@Loc["OnlineCsharpCompiler"]</PageTitle>

<h1>@Loc["OnlineCsharpCompiler"]</h1>

@Loc["Description"]

<CodeEditor @bind-Code="InnerCode">Console.WriteLine("Hello world");
</CodeEditor>

<br />

<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="ExecuteCode">@Loc["Execute"]</button>

@if (ExecutionInfo != null)
{
    <text>&nbsp;</text>
    switch (ExecutionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@Loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@Loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@Loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@Loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@Loc["Finished"]</label>
                break;
            }
    }
    <br />
    if (ExecutionInfo.Output != null && OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
    }
}

@code
{
    private string? InnerCode;

    private bool ExecuteButtonDisabled { get => ExecutionId != null; }

    /// <summary>
    /// Unique id of code execution operation
    /// </summary>
    private string? ExecutionId;
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? ExecutionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => ExecutionInfo?.Output.Split(Environment.NewLine);

    private async void ExecuteCode()
    {
        if (InnerCode != null && !ExecuteButtonDisabled)
        {
            // Sending C# code to server
            HttpResponseMessage? response = await Http.PostAsJsonAsync("Execution", InnerCode);
            // Getting unique id of code execution operation from server
            if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                ExecutionId = await response.Content.ReadAsStringAsync();
                ExecutionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Preparing);
                StateHasChanged();
                await StatusUpdateLoop();
            }
        }
    }

    private async Task StatusUpdateLoop()
    {
        do
        {
            ExecutionInfo = ((ExecutionInfo?)(await Http.GetFromJsonAsync<ExecutionInfo?>("Execution/" + ExecutionId)));
            StateHasChanged();
            await Task.Delay(1000);
        } while (ExecutionInfo != null && (ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.Finished && ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.CompilationError));
        ExecutionId = null;
        StateHasChanged();
    }
}